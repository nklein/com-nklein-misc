(in-package :card-deal-game)

(defun mirror-row (orig)
    (let* ((len (length orig))
	   (new (make-array len :element-type 'fixnum)))
	(map-into new #'(lambda (vv)
			    (case vv
				(1 2)
				(2 1)
				(otherwise vv))) (reverse orig))))

(defun equalp-rows (r1 r2)
    (or (equalp r1 r2)
	(and (= (length r1) (length r2)) (equalp r1 (mirror-row r2)))))

(defun get-picture-row (start)
    (let* ((total (reduce #'+ start))
	   (flags (make-array (1+ total) :element-type 'fixnum)))
	(labels ((rec (start start-dealer cur dealer cntr)
		    (when cur
			(incf (elt flags (elt cur 0)) (expt 2 dealer)))
		    (if (and (equalp start cur) (eql start-dealer dealer))
			flags
			(multiple-value-bind (cur dealer)
				    (next-position (or cur start) dealer)
			    (rec start start-dealer cur dealer (1+ cntr))))))
	    (rec start 0 nil 0 0))))

(defun make-picture (cards)
    (let (rows)
	(dotimes (ii cards (sort (remove-duplicates rows :test #'equalp-rows)
				 (sequence-comparator #'> #'=)))
	    (push (get-picture-row (v 'integer (- cards ii) ii)) rows))))

(defun color-of (val)
    (case val
	(0         '(1.0 1.0 1.0))
	(1         '(0.0 0.0 1.0))
	(2         '(1.0 0.0 0.0))
	(3         '(1.0 1.0 0.0))
	(otherwise '(0.2 0.2 0.2))))

(defun save-picture-as-png (picture filename &optional (scale 8))
    (let* ((cols   (length (car picture)))
	   (rows   (length picture))
	   (width  (1+ (* cols scale)))
	   (height (1+ (* rows scale))))
	(vecto:with-canvas (:width width :height height)
	    (vecto:set-rgb-fill 0.0 0.0 0.0)
	    (vecto:rectangle 0 0 width height)
	    (vecto:fill-path)
	    (dotimes (yy rows)
		(let ((row (nth yy picture)))
		    (dotimes (xx cols)
			(apply #'vecto:set-rgb-fill (color-of (elt row xx)))
			(vecto:rectangle (1+ (* xx scale))
					 (1+ (* yy scale))
					 (1- scale) (1- scale))
			(vecto:fill-path))))
	    (vecto:save-png filename))))
